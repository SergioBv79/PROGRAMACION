package CLASE5_E_DE_SALTO;
import java.util.Scanner;// para usar el scanner para introducr datos desde consola.

public class CLASE5 {
    public static void main(String[] args) {

/* Ejercicio 1 ‚Äì Salir de un bucle while con break
Haz un programa que pida al usuario n√∫meros enteros positivos.
El programa debe terminar cuando el usuario introduzca el n√∫mero 0. Usa un bucle while con break.*/
        Scanner scanner = new Scanner(System.in);

        /*while (true) {
            System.out.print("Introduce un n√∫mero entero positivo (0 para salir): ");
            int numero = scanner.nextInt();

            // Si el n√∫mero es 0, se termina el bucle con break
            if (numero == 0) {
                System.out.println("Programa terminado.");
                break;
            }
            // Si el n√∫mero no es 0, muestra el n√∫mero introducido
            System.out.println("Has introducido el n√∫mero: " + numero);
        }
        scanner.close();*/

 /*Ejercicio 2 ‚Äì Saltarse los m√∫ltiplos de 3 con continue
Escribe un programa que muestre los n√∫meros del 1 al 10,
excepto los m√∫ltiplos de 3. Usa un bucle for con continue. */

       /* for (int i = 1; i <= 10; i++) {
            if (i % 3 == 0) {
                continue;  // Salta la iteraci√≥n si el n√∫mero es m√∫ltiplo de 3
            }
            System.out.println(i);  // Imprime el n√∫mero si no es m√∫ltiplo de 3
        }*/

/*Ejercicio 3 ‚Äì Finalizar un bucle for al encontrar un n√∫mero concreto
Haz un programa que busque el n√∫mero 7 entre los n√∫meros del 1 al 20.
Cuando lo encuentre, debe mostrar un mensaje y terminar el bucle con break. */

// Iterar del 1 al 20
        // Iterar del 1 al 20
       /* for (int i = 1; i <= 20; i++) {
            // Si el n√∫mero es 7, mostrar el mensaje y terminar el bucle
            if (i == 7) {
                System.out.println("¬°Encontr√© el n√∫mero 7!");
                break; // Termina el bucle
            }
                System.out.println("Probando que se ve con: " + i);
            }*/

/*Ejercicio 4 ‚Äì Evitar mostrar letras vocales con continue
Muestra las letras de la palabra "PROGRAMACION", pero omite las vocales usando continue.*/

      /*  // Recorrer cada letra de la palabra
        String palabra = "PROGRAMACION";
        for (int i = 0; i < palabra.length(); i++) {
            char letra = palabra.charAt(i); // Obtener la letra en la posici√≥n i

            // Si la letra es una vocal, se salta a la siguiente iteraci√≥n
            if (letra == 'A' || letra == 'E' || letra == 'I' || letra == 'O' || letra == 'U'
                    ||letra == 'a' || letra == 'e' || letra == 'i' || letra == 'o' || letra == 'u')
                     {
                continue; // Saltar la letra y continuar con la siguiente
            }

            System.out.print(letra); // Mostrar la letra si no es vocal
        }*/


/*Ejercicio 5 ‚Äì Dividir dos n√∫meros con try-catch
Haz un programa que divida dos n√∫meros enteros introducidos
 por el usuario. Usa try-catch para evitar que el programa se rompa si el divisor es 0. */

        /* try {
            // Solicitar al usuario el numerador y el divisor
            System.out.print("Introduce el numerador: ");
            int numerador = Integer.parseInt(scanner.nextLine());

            System.out.print("Introduce el divisor: ");
            int divisor = Integer.parseInt(scanner.nextLine());

            // Intentar realizar la divisi√≥n
            int resultado = numerador / divisor;
            System.out.println("El resultado de la divisi√≥n es: " + resultado);
        }
        // Captura la excepci√≥n de divisi√≥n por cero
        catch (ArithmeticException e) {
            System.out.println("Error: No se puede dividir por 0. El divisor no puede ser 0.");
        }
        // Captura la excepci√≥n si el usuario introduce un valor no num√©rico
        catch (NumberFormatException e) {
            System.out.println("Error: Por favor, introduce solo n√∫meros enteros.");
        }
        finally {
            // Cerrar el objeto Scanner
            scanner.close();
        }*/
/* üü® Ejercicio 6 ‚Äì Acceder a una posici√≥n no v√°lida de una cadena (charAt) con
control de excepci√≥n.
Solicita una palabra al usuario y pide una posici√≥n. Intenta mostrar el car√°cter
en esa posici√≥n usando try-catch. Si se produce un error, muestra un mensaje.
 */
       try {
            // Solicitar al usuario la palabra
            System.out.print("Introduce una palabra: ");
            String palabra = scanner.nextLine();

            // Solicitar la posici√≥n de la que se quiere acceder
            System.out.print("Introduce la posici√≥n (n√∫mero entero): ");
            int posicion = Integer.parseInt(scanner.nextLine());

            // Intentar acceder al car√°cter en la posici√≥n indicada
            char caracter = palabra.charAt(posicion);

            // Mostrar el car√°cter en la posici√≥n especificada
            System.out.println("El car√°cter en la posici√≥n " + posicion + " es: " + caracter);
        }
        // Captura la excepci√≥n si la posici√≥n est√° fuera de rango
        catch (StringIndexOutOfBoundsException e) {
            System.out.println("Error: La posici√≥n est√° fuera del rango de la palabra.");
        }
        // Captura la excepci√≥n si el usuario introduce un valor no num√©rico
        catch (NumberFormatException e) {
            System.out.println("Error: Por favor, introduce un n√∫mero v√°lido para la posici√≥n.");
        }
        finally {
            // Cerrar el objeto Scanner
            scanner.close();
        }


    }
}
